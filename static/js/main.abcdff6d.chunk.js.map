{"version":3,"sources":["components/Table.js","components/PieChart.js","components/Bar.js","components/Line.js","components/CasesBox.js","components/WorldMap.js","App.js","reportWebVitals.js","index.js"],"names":["Table","continent","Allcountries","useState","raised","setraised","country","setCountry","countryDetails","setContryDetails","toggleRaised","e","preventDefault","useEffect","a","fetch","then","response","json","data","map","Mycountry","console","log","fetchCountrydetails","className","Card","style","backgroundColor","onMouseOver","onMouseOut","CardContent","Typography","color","gutterBottom","fontSize","index","onClick","cases","height","backgroundImage","countryInfo","flag","iso3","numeral","population","format","active","chartColors","options","legend","display","position","elements","arc","borderWidth","options1","PieChart","convertstat","stat","mydata","maintainAspectRatio","responsive","labels","recovered","deaths","datasets","hoverBackgroundColor","mydata1","todayCases","todayRecovered","todayDeaths","Bar","point","radius","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","values","buildChartData","casesType","lastDataPoint","chartData","date","newDataPoint","x","y","push","buildCountryChartData","timeline","LineChart","setData","countrydata","setCountryData","fetchData","fetchDataForCountry","length","borderColor","CasesBox","Title","Total","backgroundcolor","popup","casesTypeColors","hex","multiplier","WorldMap","countries","center","zoom","ChangeView","useMap","setView","scrollWheelZoom","TileLayer","url","attribution","Circle","lat","long","pathOptions","fillColor","fillOpacity","Math","sqrt","Popup","iso2","App","continents","setContinents","setContinent","setcountries","setcountry","setcountryInfo","all_countries_data","lng","Center","setCenter","Zoom","setZoom","setCasesType","prettyPrintStat","target","fetchContinents","fetchDefaultCountry","mycontinent","FormControl","variant","InputLabel","id","Select","labelId","onChange","MenuItem","disabled","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.abcdff6d.chunk.js","sourcesContent":["import './Table.css';\r\nimport { CardContent,Card,Typography } from '@material-ui/core';\r\nimport React,{useState,useEffect} from 'react'\r\nimport numeral from \"numeral\";\r\n\r\nfunction Table({continent = 'Asia',Allcountries}) {\r\n    const [raised,setraised]=useState(false);\r\n    const [country,setCountry] = useState('India');\r\n    const [countryDetails,setContryDetails]=useState();\r\n  \r\n   useEffect(()=>{\r\n              const fetchCountrydetails =async()=>{\r\n               await fetch(\"https://disease.sh/v3/covid-19/countries\")\r\n                  .then((response) => response.json())\r\n                  .then((data) => {\r\n                       data.map((Mycountry)=>{\r\n                        if(Mycountry.continent === continent && Mycountry.country === country){\r\n                         setContryDetails(Mycountry);\r\n                         console.log(\"country details\",Mycountry);\r\n                        }\r\n                       })\r\n                  });\r\n               }\r\n               fetchCountrydetails();\r\n    },[country]);\r\n    \r\n    function toggleRaised(e){\r\n        e.preventDefault();\r\n        setraised(!raised);\r\n    }\r\n    return (\r\n        <div className=\"table\">\r\n          <Card className=\"top_right_card\" style={{backgroundColor: \"goldenrod\"}} \r\n              onMouseOver={toggleRaised} \r\n              onMouseOut={toggleRaised} raised={raised}>\r\n                         <CardContent>\r\n                                <Typography color=\"textPrimary\" gutterBottom style={{fontSize:'20px'}}>Continent : {continent}</Typography>\r\n                                <hr/>\r\n                                <div className=\"table01\">\r\n                                    <tr>\r\n                                      <th><Typography className=\"thead\" color=\"textPrimary\">Countries</Typography></th>\r\n                                      <th><Typography className=\"thead\" color=\"textPrimary\">Active Cases</Typography></th>\r\n                                    </tr>\r\n                                { Allcountries && Allcountries.map((country,index) => (\r\n                                    country.continent === continent && (\r\n                                    <tr>\r\n                                    <td><Typography color=\"textPrimary\" key={index} onClick={()=>{setCountry(country.country)}}>{country.country}</Typography>\r\n                                    </td>\r\n                                    <td>\r\n                                        <Typography color=\"textPrimary\" key={index}>{country.cases}</Typography>\r\n                                    </td>\r\n                                    </tr>)\r\n                                ))}\r\n                                </div>\r\n                         </CardContent>\r\n          </Card>  \r\n          <Card style={{height:'240px'}}>\r\n                         <CardContent>\r\n                          <Typography color=\"textPrimary\" gutterBottom className=\"info-confirmed\"><strong>Country Information:</strong></Typography>\r\n                         \r\n                         {countryDetails &&(<div className=\"info-container\">\r\n                             <div\r\n                                className=\"info-flag\"\r\n                                style={{ backgroundImage: `url(${countryDetails.countryInfo.flag})` }}\r\n                            ></div>\r\n                            <div className=\"info-name\">{countryDetails.country}({countryDetails.countryInfo.iso3})</div>\r\n                            <div className=\"info-confirmed\">\r\n                                continent: {countryDetails.continent}\r\n                            </div>\r\n                            <div className=\"info-confirmed\">\r\n                                Population: {numeral(countryDetails.population).format(\"0.0a\")}\r\n                            </div>\r\n                            <div className=\"info-confirmed\">\r\n                                Active Cases: {numeral(countryDetails.active).format(\"0.0a\")}\r\n                            </div>\r\n                            </div>)}\r\n                          </CardContent>\r\n            </Card>\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default Table\r\n","import './PieChart.css';\r\nimport React from 'react'\r\nimport { CardContent,Card,Typography } from '@material-ui/core';\r\nimport { Doughnut } from 'react-chartjs-2';\r\nimport numeral from 'numeral'\r\nconst chartColors = [\r\n  \"green\",\r\n  \"cornflowerblue\",\r\n  \"crimson\"\r\n];\r\n\r\nconst options = {\r\n  legend: {\r\n    display: true,\r\n    position: \"left\"\r\n  },\r\n  elements: {\r\n    arc: {\r\n      borderWidth: 1\r\n    }\r\n  }\r\n};\r\nconst options1=options;\r\n\r\nfunction PieChart({data}) {\r\n\r\nconst convertstat = (stat) =>\r\n  stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\r\n\r\nconst mydata = {\r\n  maintainAspectRatio: false,\r\n  responsive: false,\r\n  labels: [\"Total Cases: \"+convertstat(data.cases), \"rotal Recovered: \"+convertstat(data.recovered), \"Total Deaths: \"+convertstat(data.deaths)],\r\n  datasets: [\r\n    {\r\n      data: [data.cases,data.recovered,data.deaths],\r\n      backgroundColor: chartColors,\r\n      hoverBackgroundColor: chartColors\r\n    }\r\n  ]\r\n};\r\nconst mydata1 = {\r\n  maintainAspectRatio: false,\r\n  responsive: false,\r\n  labels: [\"Today's Cases: \"+data.todayCases, \"Today's Recovered: \"+data.todayRecovered, \"Today's Deaths: \"+data.todayDeaths],\r\n  datasets: [\r\n    {\r\n      data: [data.todayCases+1,data.todayRecovered+1,data.todayDeaths+1],\r\n      backgroundColor: chartColors,\r\n      hoverBackgroundColor: chartColors\r\n    }\r\n  ]\r\n};\r\n\r\n    return (\r\n        <div className=\"bottom_card\" >\r\n            <Card style={{height:'190px'}}>\r\n                         <CardContent>\r\n                          <Typography color=\"textPrimary\" gutterBottom>DoughNut chart:Total\r\n                          </Typography>\r\n                          <Typography color=\"textPrimary\" gutterBottom>\r\n                          <Doughnut data={mydata} options={options} />\r\n                           </Typography>\r\n                         </CardContent>\r\n            </Card>\r\n            <Card style={{height:'190px'}}>\r\n                         <CardContent>\r\n                          <Typography color=\"textPrimary\" gutterBottom>DoughNut chart:Today\r\n                          </Typography>\r\n                          <Typography color=\"textPrimary\" gutterBottom>\r\n                          <Doughnut data={mydata1} options={options1} />\r\n                          </Typography>\r\n                         </CardContent>\r\n            </Card>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PieChart;\r\n\r\n","import './Bar.css';\r\nimport React from 'react'\r\nimport { CardContent,Card,Typography } from '@material-ui/core';\r\nfunction Bar() {\r\n    return (\r\n        <>\r\n        <Card className=\"bottom_card\" >\r\n                         <CardContent>\r\n                          <Typography color=\"textSecondary\" gutterBottom>Bar Chart\r\n                          </Typography>\r\n                         </CardContent>\r\n        </Card>    \r\n        </>\r\n    )\r\n}\r\n\r\nexport default Bar\r\n","import './Line.css';\r\nimport React ,{ useState, useEffect } from 'react'\r\nimport { CardContent,Card,Typography } from '@material-ui/core';\r\nimport { Line } from \"react-chartjs-2\";\r\nimport numeral from \"numeral\";\r\n\r\nconst options = {\r\n  legend: {\r\n    display: false,\r\n  },\r\n  elements: {\r\n    point: {\r\n      radius: 0,\r\n    },\r\n  },\r\n  maintainAspectRatio: true,\r\n  tooltips: {\r\n    mode: \"index\",\r\n    intersect: false,\r\n    callbacks: {\r\n      label: function (tooltipItem, data) {\r\n        return numeral(tooltipItem.value).format(\"+0,0\");\r\n      },\r\n    },\r\n  },\r\n  scales: {\r\n    xAxes: [\r\n      {\r\n        type: \"time\",\r\n        time: {\r\n          format: \"MM/DD/YY\",\r\n          tooltipFormat: \"ll\",\r\n        },\r\n      },\r\n    ],\r\n    yAxes: [\r\n      {\r\n        gridLines: {\r\n          display: false,\r\n        },\r\n        ticks: {\r\n          // Include a dollar sign in the ticks\r\n          callback: function (value, index, values) {\r\n            return numeral(value).format(\"0a\");\r\n          },\r\n        },\r\n      },\r\n    ],\r\n  },\r\n};\r\n\r\nconst buildChartData = (data, casesType) => {\r\n  let chartData = [];\r\n  let lastDataPoint;\r\n  for (let date in data.cases) {\r\n    if (lastDataPoint) {\r\n      let newDataPoint = {\r\n        x: date,\r\n        y: data[casesType][date] - lastDataPoint,\r\n      };\r\n      chartData.push(newDataPoint);\r\n    }\r\n    lastDataPoint = data[casesType][date];\r\n  }\r\n  return chartData;\r\n};\r\n\r\nconst buildCountryChartData = (data, casesType) => {\r\n  let chartData = [];\r\n  let lastDataPoint;\r\n  for (let date in data.timeline.cases) {\r\n    if (lastDataPoint) {\r\n      let newDataPoint = {\r\n        x: date,\r\n        y: data.timeline[casesType][date] - lastDataPoint,\r\n      };\r\n      chartData.push(newDataPoint);\r\n    }\r\n    lastDataPoint = data.timeline[casesType][date];\r\n  }\r\n  return chartData;\r\n};\r\n\r\nfunction LineChart({casesType=\"cases\",country}) {\r\n     const [data, setData] = useState({});\r\n     const [countrydata, setCountryData] = useState({});\r\n\r\n    useEffect(() => {\r\n    const fetchData = async () => {\r\n      await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\r\n        .then((response) => {\r\n          return response.json();\r\n        })\r\n        .then((data) => {\r\n          let chartData = buildChartData(data, casesType);\r\n          setData(chartData);\r\n          console.log(chartData);\r\n          // buildChart(chartData);\r\n        });\r\n    };\r\n   \r\n    fetchData();\r\n\r\n    const fetchDataForCountry = async () => {\r\n      await fetch(`https://disease.sh/v3/covid-19/historical/${country}?lastdays=120`)\r\n        .then((response) => {\r\n          return response.json();\r\n        })\r\n        .then((data) => {\r\n          let chartData = buildCountryChartData(data, casesType);\r\n          setCountryData(chartData);\r\n          console.log(chartData);\r\n        });\r\n    };\r\n    fetchDataForCountry();\r\n  }, [casesType]);\r\n    return (\r\n        <div  className=\"bottom_card\">\r\n         \r\n        <Card style={{height:'190px'}}>\r\n                <CardContent>\r\n                <Typography color=\"textPrimary\" gutterBottom>Line Chart:Last 120 days stats <strong>worldwide</strong>\r\n                </Typography>\r\n                \r\n                {data?.length > 0 && (\r\n                        <Line\r\n                        data={{\r\n                            datasets: [\r\n                            {\r\n                                backgroundColor: \"rgba(204, 16, 52, 0.5)\",\r\n                                borderColor: \"#CC1034\",\r\n                                data: data,\r\n                            },\r\n                            ],\r\n                        }}\r\n                        options={options}\r\n                        />\r\n                    )}\r\n                    \r\n                </CardContent>\r\n        </Card> \r\n        \r\n        <Card style={{height:'190px'}}>\r\n                <CardContent>\r\n                <Typography color=\"textPrimary\" gutterBottom>Line Chart:Last 120 days stats <strong>{country}</strong>\r\n                </Typography>\r\n                {countrydata?.length > 0 && (\r\n                    <Line\r\n                    data={{\r\n                        datasets: [\r\n                        {\r\n                            backgroundColor: \"rgba(204, 16, 52, 0.5)\",\r\n                            borderColor: \"#CC1034\",\r\n                            data: countrydata,\r\n                        },\r\n                        ],\r\n                    }}\r\n                    options={options}\r\n                    />\r\n                )}\r\n                </CardContent>\r\n        </Card> \r\n        \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LineChart\r\n","import './CasesBox.css';\r\nimport React,{useState} from 'react'\r\nimport { CardContent,Card,Typography } from '@material-ui/core';\r\n\r\nfunction CasesBox({Title,cases=0,Total=0,backgroundcolor,onClick,popup}) {\r\n    const [raised,setraised]=useState(false);\r\n    function toggleRaised(e){\r\n        e.preventDefault();\r\n        setraised(!raised);\r\n    }\r\n\r\n    return (\r\n         <Card className=\"covid_cases\" style={{backgroundColor: backgroundcolor,height:'160px'}} onClick={onClick}\r\n              onMouseOver={toggleRaised} \r\n              onMouseOut={toggleRaised} raised={raised}>\r\n                <CardContent>\r\n                <Typography color=\"textPrimary\" gutterBottom style={{fontSize:'20px'}}>{Title}</Typography>\r\n                <h3 className=\"covid_case\">{cases}</h3>\r\n                <Typography color=\"textSecondary\" gutterBottom>Total: {Total}</Typography>\r\n                </CardContent>\r\n\r\n        </Card> \r\n    )\r\n}\r\n\r\nexport default CasesBox\r\n","import './WorldMap.css';\r\nimport React,{useState} from 'react';\r\nimport { MapContainer  as LeafletMap , TileLayer,useMap,Circle, Popup } from \"react-leaflet\";\r\nimport \"leaflet/dist/leaflet.css\";\r\nimport numeral from \"numeral\";\r\n\r\nconst casesTypeColors = {\r\n  cases: {\r\n    hex: \"#CC1034\",\r\n    multiplier: 300,\r\n  },\r\n  recovered: {\r\n    hex: \"#7dd71d\",\r\n    multiplier: 200,\r\n  },\r\n  deaths: {\r\n    hex: \"#fb4443\",\r\n    multiplier: 500,\r\n  },\r\n};\r\n\r\nfunction WorldMap({countries,casesType, center, zoom}) {\r\n    \r\n    function ChangeView({ center, zoom }) {\r\n        const map = useMap();\r\n        map.setView(center, zoom);\r\n        return null;\r\n     }\r\n  console.log(\"case types\",casesTypeColors[casesType].hex);\r\n    return (\r\n    <div className=\"map\">\r\n      <LeafletMap center={center} zoom={zoom} scrollWheelZoom={false}>\r\n      <ChangeView center={center} zoom={zoom} /> \r\n        <TileLayer\r\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n        />\r\n        {countries && countries.map((country,index) => (\r\n            <Circle\r\n            center={[country.countryInfo.lat, country.countryInfo.long]}\r\n            pathOptions={{color: casesTypeColors[casesType].hex,\r\n                     fillColor: casesTypeColors[casesType].hex }}\r\n            fillOpacity={0.5}\r\n            radius={\r\n                Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\r\n            }\r\n            key={index}\r\n            >\r\n            <Popup style={{height:'100px'}}>\r\n                    <div className=\"info-container\">\r\n                    <div\r\n                        className=\"info-flag\"\r\n                        style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\r\n                    ></div>\r\n                    <div className=\"info-name\">{country.country}({country.countryInfo.iso2})</div>\r\n                    <div className=\"info-confirmed\">\r\n                        continent: {country.continent}\r\n                    </div>\r\n                    <div className=\"info-confirmed\">\r\n                        Population: {numeral(country.population).format(\"0.0a\")}\r\n                    </div>\r\n                    <div className=\"info-confirmed\">\r\n                        Cases: {numeral(country.cases).format(\"0.0a\")}\r\n                    </div>\r\n                    <div className=\"info-recovered\">\r\n                        Recovered: {numeral(country.recovered).format(\"0.0a\")}\r\n                    </div>\r\n                    <div className=\"info-deaths\">\r\n                        Deaths: {numeral(country.deaths).format(\"0.0a\")}\r\n                    </div>\r\n                    </div>\r\n                </Popup>\r\n            </Circle>\r\n        ))};\r\n      </LeafletMap>\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default WorldMap\r\n\r\n\r\n ","import React,{useState,useEffect} from 'react';\nimport './App.css';\nimport { Select,MenuItem,FormControl,CardContent,Card,Typography,InputLabel } from '@material-ui/core';\nimport Table from './components/Table';\nimport PieChart from './components/PieChart';\nimport Bar from './components/Bar';\nimport LineChart from './components/Line';\nimport CasesBox from './components/CasesBox';\nimport WorldMap from './components/WorldMap';\nimport numeral from \"numeral\";\n\nfunction App() {\n   const [continents,setContinents] = useState([]);\n   const [continent,setContinent] = useState();\n   const [countries,setcountries] = useState([]);\n   const [country,setcountry] = useState('India');\n   const [countryInfo,setcountryInfo] = useState({});\n   const [all_countries_data,setData] =useState([]);\n   const [Center, setCenter] = useState({ lat:20, lng: 70 });\n   const [Zoom, setZoom] = useState(4);\n   const [casesType, setCasesType] = useState(\"cases\");\n\n const prettyPrintStat = (stat) =>\n  stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\n\n   useEffect(()=>{\n    const fetchContinents =async()=>{\n      await fetch(\"https://disease.sh/v3/covid-19/continents\")\n      .then(response=>response.json())\n      .then(data=>{\n        console.log(\"data>>\",data);\n        setContinents(data);\n      })\n    }\n\n    fetchContinents();\n\n      const fetchCountrydetails =async()=>{\n      await fetch(\"https://disease.sh/v3/covid-19/countries\")\n                  .then((response) => response.json())\n                  .then((data) => {\n                        setData(data);\n                  });\n      }\n\n    fetchCountrydetails();\n\n   const fetchDefaultCountry =async()=>{\n    await fetch(`https://disease.sh/v3/covid-19/countries/${country}`)\n            .then((response) => response.json())\n            .then((data) => {\n                  setcountryInfo(data);\n            });\n   }\n   fetchDefaultCountry();\n   },[]);\n\n   useEffect(()=>{\n      if(continent){\n       continents.map(mycontinent=>{\n             if(mycontinent.continent===continent){\n              setcountries(mycontinent.countries);\n              console.log(\"countries>>\",mycontinent.countries);\n             }\n       });\n      }\n   },[continent]);\n\n   function selectContinent(e){\n         setContinent(e.target.value);\n   }\n\n   async function selectCountry(e){\n      console.log(\"value>>>\",e.target.value)\n      setcountry(e.target.value);\n      await fetch(`https://disease.sh/v3/covid-19/countries/${e.target.value}`)\n            .then((response) => response.json())\n            .then((data) => {\n                  setcountryInfo(data);\n                  setCenter({...Center,['lat']:data.countryInfo.lat,['lng']:data.countryInfo.long});\n                  setZoom(4);\n            });\n     }\n     \n  return (\n    <div className=\"App\">\n              <div className=\"App_top\">\n                    <div className=\"App_left_top\">\n                       <div className=\"App_left_header\">\n                          <h2 className=\"App_header_text\">React COVID-19 Tracker</h2>\n                          {continents && \n                          <FormControl className=\"App_dropdown\" variant=\"filled\">\n                          <InputLabel id=\"continent-label\">Continents</InputLabel>\n                          <Select labelId=\"continent-label\" id=\"continent-label\" value={continent} onChange={selectContinent}>\n                                {continents.map((continent,index) => (\n                                      <MenuItem key={index} value={continent.continent}>{continent.continent}</MenuItem>\n                                ))}\n                          </Select>\n                          </FormControl>}\n                          <FormControl className=\"App_dropdown\" variant=\"filled\">\n                          <InputLabel id=\"countries-label\">Countries</InputLabel>\n                          <Select labelId=\"countries-label\" id=\"countries-label\" value=\"worldWide\" disabled={!continent} value={country} onChange={selectCountry}>\n                                {!continent && <MenuItem value={country}>{country}</MenuItem>}\n                                {countries.map((country,index) => (\n                                      <MenuItem key={index} value={country}>{country}</MenuItem>\n                                ))}\n                          </Select>\n                          </FormControl>\n                       </div>\n                       <div className=\"App_left_boxes\">\n                         <CasesBox  Title=\"CoronaVirus Cases\" cases={prettyPrintStat(countryInfo.todayCases)} \n                         Total={prettyPrintStat(countryInfo.cases)} backgroundcolor=\"green\"  onClick={(e) => setCasesType(\"cases\")} />\n                         <CasesBox Title=\"Recoveries\" cases={prettyPrintStat(countryInfo.todayRecovered)} \n                         Total={prettyPrintStat(countryInfo.recovered)} backgroundcolor=\"whitesmoke\" onClick={(e) => setCasesType(\"recovered\")} popup/>\n                         <CasesBox Title=\"Deaths\" cases={prettyPrintStat(countryInfo.todayDeaths)} \n                         Total={prettyPrintStat(countryInfo.deaths)} backgroundcolor=\"crimson\" onClick={(e) => setCasesType(\"deaths\")}/>\n                       </div> \n                       <WorldMap\n                        countries={all_countries_data}\n                        casesType={casesType}\n                        center={Center}\n                        zoom={Zoom}\n                        />\n                    </div>\n                    <Table continent={continent} Allcountries={all_countries_data}/>\n                    <div>\n                    <LineChart casesType={casesType} country={country}/> \n                    <PieChart data={countryInfo}/>\n                    </div>\n              </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}